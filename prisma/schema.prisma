// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  name             String
  password         String
  role             Role      @default(USER)
  isActive         Boolean   @default(true) @map("is_active")
  loginAttempts    Int       @default(0) @map("login_attempts")
  lastLoginAttempt DateTime? @map("last_login_attempt")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@map("user")
}

enum Role {
  ADMIN
  USER
}

// ------------------ Tablas estáticas ------------------

model PayrollConcept {
  id              Int                @id @default(autoincrement())
  code            String             @unique @db.VarChar(3)
  name            String             @db.VarChar(60)
  type            PayrollConceptType
  base            String?
  factor          Float?
  isIncome        Boolean            @map("is_income")
  isVacation      Boolean            @map("is_vacation")
  isIBC           Boolean            @map("is_ibc")
  calculationType CalculationType    @map("calculation_type")
  news            SettlementNew[]
}

enum PayrollConceptBase {
  ALLOWANCE
  HOURLY
  IBC
  INCOME
  SALARY
  VACATION
  ZERO
}

enum PayrollConceptType {
  DEVENGADO
  DEDUCCION
}

enum CalculationType {
  LINEAL
  FACTORIAL
  NOMINAL
}

// ------------------ Tablas dinámicas ------------------
model Employee {
  id                 Int             @id @default(autoincrement())
  identification     String          @unique @db.VarChar(60)
  firstSurname       String          @map("first_surname") @db.VarChar(60)
  secondSurname      String?         @map("second_surname") @db.VarChar(60)
  firstName          String          @map("first_name") @db.VarChar(60)
  otherNames         String?         @map("other_names") @db.VarChar(60)
  salary             Float
  transportAllowance Boolean         @map("transport_allowance")
  isActive           Boolean         @map("is_active")
  settlements        Settlement[]
  news               SettlementNew[]
}

enum SettlementStatus {
  DRAFT
  OPEN
  CLOSED
  VOID
}

model Settlement {
  id              Int                   @id @default(autoincrement())
  startDate       DateTime              @map("start_date")
  endDate         DateTime              @map("end_date")
  status          SettlementStatus      @map("status")
  earningsValue   Float                 @map("earnings_value")
  deductionsValue Float                 @map("deductions_value")
  totalValue      Float                 @map("total_value")
  employeeId      Int                   @map("employee_id")
  employee        Employee              @relation(fields: [employeeId], references: [id])
  periodId        Int?                  @map("period_id")
  earnings        SettlementEarning[]
  deductions      SettlementDeduction[]
  period          Period?               @relation(fields: [periodId], references: [id])
}

model SettlementEarning {
  id           Int             @id @default(autoincrement())
  value        Float
  settlementId Int             @unique @map("settlement_id")
  settlement   Settlement      @relation(fields: [settlementId], references: [id])
  news         SettlementNew[]
}

model SettlementDeduction {
  id           Int             @id @default(autoincrement())
  value        Float
  settlementId Int             @unique @map("settlement_id")
  settlement   Settlement      @relation(fields: [settlementId], references: [id])
  news         SettlementNew[]
}

model SettlementNew {
  id                     Int                  @id @default(autoincrement())
  date                   DateTime             @map("date")
  quantity               Float?
  value                  Float
  status                 SettlementNewsStatus @map("status")
  conceptId              Int                  @map("concept_id")
  employeeId             Int                  @map("employee_id")
  settlementEarningsId   Int?                 @map("settlement_earnings_id")
  settlementDeductionsId Int?                 @map("settlement_deductions_id")
  concept                PayrollConcept       @relation(fields: [conceptId], references: [id])
  employee               Employee             @relation(fields: [employeeId], references: [id])
  earnings               SettlementEarning?   @relation(fields: [settlementEarningsId], references: [id])
  deductions             SettlementDeduction? @relation(fields: [settlementDeductionsId], references: [id])
}

enum SettlementNewsStatus {
  NONE
  OPEN
  DRAFT
  CLOSED
  VOID
}

model Period {
  id                Int          @id @default(autoincrement())
  startDate         DateTime     @map("start_date")
  endDate           DateTime     @map("end_date")
  paymentDate       DateTime?    @map("payment_date")
  status            PeriodStatus @map("status")
  employeesQuantity Int?         @map("employees_quantity")
  earningsTotal     Float?       @map("earnings_total")
  deductionsTotal   Float?       @map("deductions_total")
  totalValue        Float?       @map("total_value")
  settlements       Settlement[]
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
}

enum PeriodStatus {
  DRAFT
  OPEN
  CLOSED
  VOID
}
