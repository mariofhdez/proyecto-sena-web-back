// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  name             String
  password         String
  role             Role      @default(USER)
  isActive         Boolean   @default(true) @map("is_active")
  loginAttempts    Int       @default(0) @map("login_attempts")
  lastLoginAttempt DateTime? @map("last_login_attempt")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@map("user")
}

enum Role {
  ADMIN
  USER
}

// ------------------ Tablas est√°ticas ------------------

model PayrollConcept {
  id          Int           @id @default(autoincrement())
  code        String        @unique @db.VarChar(3)
  name        String        @db.VarChar(50)
  type        PayrollConceptType
  isSalary    Boolean       @map("is_salary")
  isIBC       Boolean       @map("is_ibc")
  calculationType CalculationType @map("calculation_type")
  payrollNews PayrollNews[]

  @@map("payroll_concept")
}

enum PayrollConceptType {
  DEVENGADO
  DEDUCCION
  EXTRA
}

enum CalculationType {
  LINEAL
  FACTORIAL
  NOMINAL
}

// ------------------ Dynamic Tables ------------------

model Employer {
  identification       String             @id @db.VarChar(10)
  verificationDigit    String?            @map("verification_digit") @db.Char(1)
  name                 String             @db.VarChar(45)

  @@map("employer")
}

model Employee {
  id                   Int                   @id @default(autoincrement())
  identification       String                @db.VarChar(10)
  firstSurname         String                @map("first_surname") @db.VarChar(45)
  secondSurname        String?               @map("second_surname") @db.VarChar(45)
  firstName            String                @map("first_name") @db.VarChar(45)
  otherNames           String?               @map("other_names") @db.VarChar(45)
  salary               Float
  transportAllowance   Boolean                @map("transport_allowance")
  isActive             Boolean               @map("is_active")
  settlements          Settlement[]
  payrollNews          PayrollNews[]

  @@map("employee")
}

model PayrollPeriod {
  id             Int                  @id @default(autoincrement())
  employeesCount Int                  @map("employees_count")
  totalEarned    Float                @map("total_earned")
  totalDeduction Float                @map("total_deduction")
  totalPayment   Float                @map("total_payment")
  settlementDate DateTime             @map("settlement_date")
  startDate      DateTime             @map("start_date")
  endDate        DateTime             @map("end_date")
  settlements    Settlement[]

  @@map("payroll_period")
}

model Settlement {
  id             Int                   @id @default(autoincrement())
  employeeId     Int                   @map("employee_id")
  employee       Employee              @relation(fields: [employeeId], references: [id])
  startDate      DateTime              @map("start_date")
  endDate        DateTime              @map("end_date")
  totalEarned    Float                 @map("total_earned")
  totalDeduction Float                 @map("total_deduction")
  totalPayment   Float                 @map("total_payment")
  workedDays     Int                   @map("worked_days")
  periodId       Int?                  @map("period_id")
  period         PayrollPeriod?        @relation(fields: [periodId], references: [id])
  deductions     SettlementDeduction[]
  earnings       SettlementEarning[]

  @@map("employee_settlement")
}

model PayrollNews {
  id                   Int                   @id @default(autoincrement())
  newsDate             DateTime              @map("date")
  newsQuantity         Int                   @map("quantity")
  newsValue            Float                 @map("value")
  payrollConceptId     Int                   @map("payroll_concept_id")
  employeeId           Int                   @map("employee_id")
  status               PayrollNewsStatus    @map("status")
  payrollConcept       PayrollConcept        @relation(fields: [payrollConceptId], references: [id])
  employee             Employee              @relation(fields: [employeeId], references: [id])
  deductions           SettlementDeduction[]
  earnings             SettlementEarning[]

  @@map("payroll_new")
}

enum PayrollNewsStatus {
  OPEN
  CLOSED
  IN_PROGRESS
}

model SettlementDeduction {
  id                   Int                @id @default(autoincrement())
  deductionValue       Float              @map("deduction_value")
  payrollNewsId        Int                @map("payroll_news_id")
  settlementId         Int?                @map("settlement_id")
  payrollNews          PayrollNews        @relation(fields: [payrollNewsId], references: [id])
  settlement           Settlement?         @relation(fields: [settlementId], references: [id])

  @@map("settlement_deduction")
}

model SettlementEarning {
  id                   Int                @id @default(autoincrement())
  earningValue         Float              @map("earning_value")
  payrollNewsId        Int                @map("payroll_news_id")
  settlementId         Int?                @map("settlement_id")
  payrollNews          PayrollNews        @relation(fields: [payrollNewsId], references: [id])
  settlement           Settlement?         @relation(fields: [settlementId], references: [id])

  @@map("settlement_earning")
}
