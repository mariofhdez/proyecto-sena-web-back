// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique @db.VarChar(100)
  name             String    @db.VarChar(100)
  password         String    @db.VarChar(255)
  role             Role      @default(USER)
  isActive         Boolean   @default(true) @map("is_active")
  loginAttempts    Int       @default(0) @map("login_attempts")
  lastLoginAttempt DateTime? @map("last_login_attempt")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@map("user")
}

enum Role {
  ADMIN
  USER
}

model Employee {
  id                 Int             @id @default(autoincrement())
  identification     String          @unique @db.VarChar(60)
  firstName          String          @map("first_name") @db.VarChar(60)
  firstSurname       String          @map("first_surname") @db.VarChar(60)
  secondSurname      String?         @map("second_surname") @db.VarChar(60)
  otherNames         String?         @map("other_names") @db.VarChar(60)
  salary             Float
  position           String          @map("position") @db.VarChar(60) @default("Empleado")
  transportAllowance Boolean         @map("transport_allowance")
  isActive           Boolean         @default(true) @map("is_active")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  settlements        Settlement[]
  settlementDetails  SettlementDetail[]
  noveties           Novelty[]

  @@map("employee")
}

model PayrollConcept {
  id               Int                @id @default(autoincrement())
  code             String             @unique @db.VarChar(3)
  name             String             @db.VarChar(60)
  type             PayrollConceptType
  calculationType  CalculationType    @map("calculation_type")
  base             PayrollConceptBase?
  factor           Float?
  divisor          Float?
  isIncome         Boolean            @map("is_income")
  isRegularConcept Boolean            @map("is_regular_concept")
  isVacation       Boolean            @default(false) @map("is_vacation")
  isIBC            Boolean            @default(false) @map("is_ibc")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  settlementDetails SettlementDetail[]
  noveties          Novelty[]
  
  @@map("payroll_concept")
}

enum PayrollConceptBase {
  ALLOWANCE
  HOURLY
  IBC
  INCOME
  SALARY
  VACATION
  ZERO
}

enum PayrollConceptType {
  DEVENGADO
  DEDUCCION
}

enum CalculationType {
  LINEAL
  FACTORIAL
  NOMINAL
}

model Period {
  id                Int          @id @default(autoincrement())
  period            String       @map("period") @default("2025-Enero")
  startDate         DateTime     @map("start_date")
  endDate           DateTime     @map("end_date")
  paymentDate       DateTime?    @map("payment_date")
  status            PeriodStatus @default(OPEN) @map("status")
  employeesQuantity Int?         @map("employees_quantity")
  earningsTotal     Float?       @map("earnings_total")
  deductionsTotal   Float?       @map("deductions_total")
  totalValue        Float?       @map("total_value")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  settlements       Settlement[]
  noveties           Novelty[]

  @@map("period")
}

enum PeriodStatus {
  OPEN
  CLOSED
}

model Settlement {
  id              Int                   @id @default(autoincrement())
  startDate       DateTime              @map("start_date")
  endDate         DateTime              @map("end_date")
  status          SettlementStatus      @default(DRAFT) @map("status")
  earningsValue   Float                 @default(0) @map("earnings_value")
  deductionsValue Float                 @default(0) @map("deductions_value")
  totalValue      Float                 @default(0) @map("total_value")
  employeeId      Int                   @map("employee_id")
  periodId        Int?                  @map("period_id")
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  employee        Employee              @relation(fields: [employeeId], references: [id])
  period          Period?               @relation(fields: [periodId], references: [id])
  settlementDetails SettlementDetail[]

  @@map("settlement")
}

enum SettlementStatus {
  DRAFT
  OPEN
  CLOSED
  VOID
  NONE // Agregado para detalles de liquidaci√≥n
}

model SettlementDetail {
  id           Int             @id @default(autoincrement())
  date         DateTime        @default(now()) @map("date")
  quantity     Float?
  value        Float
  status       SettlementStatus @default(DRAFT) @map("status")
  settlementId Int             @map("settlement_id")
  conceptId    Int             @map("concept_id")
  employeeId   Int             @map("employee_id")
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  settlement   Settlement      @relation(fields: [settlementId], references: [id], onDelete: Cascade)
  concept      PayrollConcept  @relation(fields: [conceptId], references: [id])
  employee     Employee        @relation(fields: [employeeId], references: [id])

  @@map("settlement_detail")
}

model Novelty {
  id         Int       @id @default(autoincrement())
  date       DateTime  @default(now()) @map("date")
  quantity   Float?
  value      Float
  status     NoveltyStatus @default(PENDING) @map("status")
  employeeId Int       @map("employee_id")
  conceptId  Int       @map("concept_id")
  periodId   Int?      @map("period_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  employee   Employee  @relation(fields: [employeeId], references: [id])
  concept    PayrollConcept @relation(fields: [conceptId], references: [id])
  period     Period?   @relation(fields: [periodId], references: [id])

  @@map("novelty")
}

enum NoveltyStatus {
  PENDING
  APPLIED
  CANCELLED
}
