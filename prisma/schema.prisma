// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  name String
  password String
  role Role @default(USER)
  isActive Boolean @default(true)
  loginAttempts Int @default(0)
  lastLoginAttempt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

enum Role {
  ADMIN
  USER
}

// ------------------ Tablas est√°ticas ------------------

model State {
  id     String   @id @db.VarChar(2)
  name String   @db.VarChar(50)
  cities City[]
  addresses Address[]

  @@map("state") 
}

model City {
  id     String   @id @db.VarChar(10)
  name String   @db.VarChar(50)
  stateId String
  state       State     @relation(fields: [stateId], references: [id])
  addresses Address[]

  @@map("city")
}

model IdentificationType {
  id     String   @id @db.VarChar(2)
  name String   @db.VarChar(50)
  employers Employer[]
  employees Employee[]

  @@map("identification_type")
}

model PaymentMethod {
  id          String      @id @db.VarChar(3)
  description String      @db.VarChar(120)
  paymentData   PaymentData[]

  @@map("payment_method")
}

model EmployeeSubtype {
  id                String           @id @db.Char(4)
  description       String           @db.VarChar(45)
  contracts         ContractInformation[]

  @@map("employee_subtype")
}

model EmployeeType {
  id          String      @id @db.VarChar(2)
  description String      @db.VarChar(120)
  contracts   ContractInformation[]

  @@map("employee_type")
}

model ContractType {
  id          String      @id @db.Char(4)
  description String      @db.VarChar(25)
  contracts   ContractInformation[]

  @@map("contract_type")
}

model InabilityType {
  id          String      @id @db.Char(4)
  description String      @db.VarChar(120)
  absences AbsenceNew[]

  @@map("inability_type")
}

model PayrollConcept {
  id          Int         @id @default(autoincrement())
  type        String      @db.VarChar(45)
  is_salary   Boolean
  payrollNews PayrollNews[]

  @@map("payroll_concept")
}

// ------------------ Dynamic Tables ------------------

model Employer {
  identification     String   @id @db.VarChar(10)
  verification_digit String? @db.Char(1)
  name              String   @db.VarChar(45)
  addressId         Int
  identificationTypeId String
  address           Address @relation(fields: [addressId], references: [id])
  identificationType IdentificationType @relation(fields: [identificationTypeId], references: [id])

  @@map("employer")
}

model Address {
  id         Int      @id @default(autoincrement())
  address    String   @db.VarChar(100)
  cityId     String
  stateId    String
  city       City     @relation(fields: [cityId], references: [id])
  state      State    @relation(fields: [stateId], references: [id])
  employers  Employer[]
  employees  Employee[]
  contractInformation ContractInformation[]

  @@map("address")
}

model Employee {
  id                  Int      @id @default(autoincrement())
  first_surname       String   @db.VarChar(45)
  second_surname      String?  @db.VarChar(45)
  first_name         String   @db.VarChar(45)
  other_names        String?  @db.VarChar(45)
  identificationTypeId String
  identification     String   @db.VarChar(10)
  addressId          Int
  paymentDataId      Int
  identificationType IdentificationType @relation(fields: [identificationTypeId], references: [id])
  address           Address @relation(fields: [addressId], references: [id])
  paymentData       PaymentData @relation(fields: [paymentDataId], references: [id])
  contracts         ContractInformation[]
  payrollNews       PayrollNews[]

  @@map("employee")
}

model PaymentData {
  id                Int         @id @default(autoincrement())
  is_active         Boolean
  paymentMethodId   String
  account_number    String      @db.VarChar(45)
  bank_entity      String      @db.VarChar(100)
  paymentMethod     PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  employees         Employee[]
  payrollNews       PayrollNews[]

  @@map("payment_data")
}

model ContractInformation {
  id                Int         @id @default(autoincrement())
  pension_risk      Int
  salary            Float
  start_date        DateTime
  end_date          DateTime?
  position          String      @db.VarChar(45)
  workerTypeId      String
  workerSubtypeId   String
  contractTypeId    String
  addressId         Int
  employeeId        Int
  workerType        EmployeeType @relation(fields: [workerTypeId], references: [id])
  workerSubtype     EmployeeSubtype @relation(fields: [workerSubtypeId], references: [id])
  contractType      ContractType @relation(fields: [contractTypeId], references: [id])
  address           Address @relation(fields: [addressId], references: [id])
  employee          Employee @relation(fields: [employeeId], references: [id])
  settlements       EmployeeSettlement[]

  @@map("contract_information")
}

model PayrollPeriod {
  id                  Int      @id @default(autoincrement())
  employees_count     Int
  total_earned        Float
  total_deduction     Float
  total_payment       Float
  settlement_date     DateTime
  start_date          DateTime
  end_date            DateTime
  settlements         EmployeeSettlement[]

  @@map("payroll_period")
}

model EmployeeSettlement {
  id                  Int      @id @default(autoincrement())
  prefix              String
  consecutive         Int
  total_earned        Float
  total_deduction     Float
  total_payment       Float
  workedDays Int
  periodId            Int
  contractId          Int
  period              PayrollPeriod @relation(fields: [periodId], references: [id])
  contract            ContractInformation @relation(fields: [contractId], references: [id])
  deductions          SettlementDeduction[]
  earnings            SettlementEarning[]
  news                PayrollNews[]

  @@map("employee_settlement")
}

model PayrollNews {
  id                      Int      @id @default(autoincrement())
  news_date              DateTime
  news_quantity          Int
  news_value             Float
  payrollConceptId       Int
  employeeId             Int
  paymentDataId          Int
  payrollConcept         PayrollConcept @relation(fields: [payrollConceptId], references: [id])
  employee               Employee @relation(fields: [employeeId], references: [id])
  paymentData            PaymentData @relation(fields: [paymentDataId], references: [id])
  absences               AbsenceNew[]
  extraHours             OvertimeNew[]
  deductions             SettlementDeduction[]
  earnings               SettlementEarning[]
  employeeSettlementId   Int
  employeeSettlement     EmployeeSettlement @relation(fields: [employeeSettlementId], references: [id])

    @@map("payroll_new")
}

model SettlementDeduction {
  id                    Int      @id @default(autoincrement())
  deduction_value       Float
  payrollNewsId         Int
  payrollNews           PayrollNews @relation(fields: [payrollNewsId], references: [id])
  employeeSettlementId  Int
  employeeSettlement    EmployeeSettlement @relation(fields: [employeeSettlementId], references: [id])

  @@map("settlement_deduction")  
}

model SettlementEarning {
  id                    Int      @id @default(autoincrement())
  earning_value         Float
  payrollNewsId         Int
  payrollNews           PayrollNews @relation(fields: [payrollNewsId], references: [id])
  employeeSettlementId  Int
  employeeSettlement    EmployeeSettlement @relation(fields: [employeeSettlementId], references: [id])

  @@map("settlement_earning")
}

model AbsenceNew {
  id                  Int      @id @default(autoincrement())
  start_date          DateTime
  end_date            DateTime
  disabilityTypeId    String
  payrollNewsId       Int
  disabilityType      InabilityType @relation(fields: [disabilityTypeId], references: [id])
  payrollNews         PayrollNews @relation(fields: [payrollNewsId], references: [id])

  @@map("absence_new")
}

model OvertimeNew {
  id                  Int      @id @default(autoincrement())
  start_date          DateTime
  end_date            DateTime
  payrollNewsId       Int
  payrollNews         PayrollNews @relation(fields: [payrollNewsId], references: [id])

  @@map("overtime_new")
}
