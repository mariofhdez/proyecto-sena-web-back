// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================================
// GESTIÓN DE USUARIOS Y AUTENTICACIÓN
// ============================================================

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  name             String
  password         String
  role             Role      @default(USER)
  isActive         Boolean   @default(true) @map("is_active")
  loginAttempts    Int       @default(0) @map("login_attempts")
  lastLoginAttempt DateTime? @map("last_login_attempt")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

// ============================================================
// GESTIÓN DE EMPLEADOS
// ============================================================

model Employee {
  id                 Int             @id @default(autoincrement())
  identification     String          @unique @db.VarChar(60)
  firstSurname       String          @map("first_surname") @db.VarChar(60)
  secondSurname      String?         @map("second_surname") @db.VarChar(60)
  firstName          String          @map("first_name") @db.VarChar(60)
  otherNames         String?         @map("other_names") @db.VarChar(60)
  salary             Float
  position           String          @map("position") @db.VarChar(60) @default("Empleado")
  transportAllowance Boolean         @map("transport_allowance")
  isActive           Boolean         @map("is_active")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")

  settlements        Settlement[]
  novelties               Novelty[]
  setllementDetails       SettlementDetail[]

  @@map("employees")

  // Índices
  @@index([identification])
  @@index([isActive])
}

// ============================================================
// GESTIÓN DE CONCEPTOS DE NÓMINA
// ============================================================

model Concept {
  id               Int                @id @default(autoincrement())
  code             String             @unique @db.VarChar(3)
  name             String             @db.VarChar(60)
  type             ConceptType
  calculationType  CalculationType    @map("calculation_type")
  base             ConceptBase?
  factor           Float?
  divisor          Float?
  isIncome         Boolean            @map("is_income")
  isVacation       Boolean            @map("is_vacation")
  isIBC            Boolean            @map("is_ibc")
  isRegularConcept Boolean            @map("is_regular_concept")

  novelties             Novelty[]
  settlementDetails     SettlementDetail[]

  @@map("concepts")

  // Índices
  @@index([code])
  @@index([isRegularConcept])
}

enum ConceptBase {
  ALLOWANCE
  HOURLY
  IBC
  INCOME
  SALARY
  VACATION
  ZERO
}

enum ConceptType {
  DEVENGADO
  DEDUCCION
}

enum CalculationType {
  LINEAL
  FACTORIAL
  NOMINAL
}

// ============================================================
// GESTIÓN DE PERÍODOS
// ============================================================

model Period {
  id                Int          @id @default(autoincrement())
  period            String       @map("period")
  startDate         DateTime     @map("start_date")
  endDate           DateTime     @map("end_date")
  paymentDate       DateTime?    @map("payment_date")
  status            PeriodStatus @map("status")
  employeesQuantity Int?         @map("employees_quantity")
  earningsTotal     Float?       @map("earnings_total")
  deductionsTotal   Float?       @map("deductions_total")
  totalValue        Float?       @map("total_value")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")

  settlements       Settlement[]
  novelties         Novelty[]

  @@map("periods")

  // Índices
  @@index([startDate, endDate])
  @@index([status])
}

enum PeriodStatus {
  OPEN
  CLOSED
}

// ============================================================
// GESTIÓN DE NOVEDADES
// ============================================================

model Novelty {
  id                     Int                  @id @default(autoincrement())
  date                   DateTime             @map("date")
  quantity               Float?
  value                  Float
  status                 NoveltyStatus        @map("status")
  conceptId              Int                  @map("concept_id")
  employeeId             Int                  @map("employee_id")
  periodId               Int?                  @map("period_id")

  //Relaciones
  concept                Concept              @relation(fields: [conceptId], references: [id])
  employee               Employee             @relation(fields: [employeeId], references: [id])
  period                 Period?              @relation(fields: [periodId], references: [id])

	@@map("novelties")

  // Índices
  @@index([date])
  @@index([status])
  @@index([employeeId, periodId])
}

enum NoveltyStatus {
  PENDING
  APPLIED
  CANCELLED
}

// ============================================================
// GESTIÓN DE LIQUIDACIONES
// ============================================================

model Settlement {
  id              Int                   @id @default(autoincrement())
  employeeId      Int                   @map("employee_id")
  periodId        Int?                  @map("period_id")
  startDate       DateTime              @map("start_date")
  endDate         DateTime              @map("end_date")
  status          SettlementStatus      @map("status")
  earningsValue   Float                 @map("earnings_value") @db.Double
  deductionsValue Float                 @map("deductions_value") @db.Double
  totalValue      Float                 @map("total_value") @db.Double

  //Relaciones
  employee        Employee              @relation(fields: [employeeId], references: [id])
  period          Period?               @relation(fields: [periodId], references: [id])
  details         SettlementDetail[]

  @@map("settlements")

  // Índices
  @@index([employeeId, periodId])
  @@index([status])
}

enum SettlementStatus {
  DRAFT
  OPEN
  CLOSED
  VOID
}

// ============================================================
// DETALLE DE LIQUIDACIONES
// ============================================================

model SettlementDetail {
  id              Int                   @id @default(autoincrement())
  settlementId    Int                   @map("settlement_id")
  conceptId       Int                   @map("concept_id")
  employeeId      Int                   @map("employee_id")
  date            DateTime              @map("date")
  quantity        Int?                  @map("quantity")
  value           Float                 @map("value") @db.Double
  status          SettlementDetailStatus @map("status")

  //Relaciones
  settlement      Settlement            @relation(fields: [settlementId], references: [id])
  concept         Concept               @relation(fields: [conceptId], references: [id])
  employee        Employee              @relation(fields: [employeeId], references: [id])

  @@map("settlement_details")

  // Índices
  @@index([settlementId])
  @@index([conceptId])
  @@index([employeeId])
}

enum SettlementDetailStatus {
  NONE
  OPEN
  DRAFT
  CLOSED
  VOID
}

